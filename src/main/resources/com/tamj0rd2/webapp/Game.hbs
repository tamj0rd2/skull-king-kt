<html>
<head>
    <link href="/style.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="content">
    <h1>Game Page</h1>

    <h2 id="gameState">
        {{#if waitingForMorePlayers}}
            Waiting for more players...
        {{/if}}
    </h2>

    <h2 id="gamePhase"></h2>

    <h3>Players</h3>
    <ul id="players">
        {{#each players}}
            <li>{{this}}</li>
        {{/each}}
    </ul>

    <h3>Hand</h3>
    <ul id="hand"></ul>

    <form>
        <label>
            Bet
            <input type="number" name="bet" min="0" max="10">
        </label>
        <button id="placeBet" type="button" onclick="onBetSubmit()">Place Bet</button>
    </form>

    <h3>Players who have bet</h3>
    <ul id="playersWhoHaveBet"></ul>

    <h3>Bets</h3>
    <ul id="bets"></ul>

    <h3>Cards in trick</h3>
    <ul id="trick"></ul>
</div>
<script>
    function onBetSubmit() {
        const bet = document.getElementsByName("bet")[0].value
        socket.send(JSON.stringify({
            type: "ClientMessage$BetPlaced",
            bet: bet,
            playerId: "{{playerId}}"
        }))
    }

    const socket = new WebSocket("{{wsHost}}/{{playerId}}");

    // Connection opened
    socket.addEventListener("open", (event) => {
        console.log("connected to ws")
    });

    socket.addEventListener("close", (event) => {
        console.error("disconnected from ws")
    })

    // Listen for messages
    socket.addEventListener("message", (event) => {
        console.log("Message from server ", event.data);

        try {
            const gameEvent = JSON.parse(event.data)
            switch (gameEvent.type) {
                // TODO: all of this stuff could do with some furniture arranging
                case "PlayerJoined": {
                    const players = document.getElementById("players")
                    const li = document.createElement("li")
                    li.innerText = gameEvent.playerId
                    players.appendChild(li)

                    if (!gameEvent.waitingForMorePlayers) {
                        const gameStateEl = document.getElementById("gameState")
                        gameStateEl.innerText = ""
                    }
                    return;
                }
                case "GameStarted": {
                    const gameStateEl = document.getElementById("gameState")
                    gameStateEl.innerText = "The game has started :D"

                    const gamePhaseEl = document.getElementById("gamePhase")
                    gamePhaseEl.innerText = "Place your bid!"
                    return;
                }
                case "RoundStarted": {
                    const handEl = document.getElementById("hand")
                    gameEvent.cardsDealt.forEach(card => {
                        const li = document.createElement("li")
                        li.innerText = card.id

                        const button = document.createElement("button")
                        button.innerText = "Play"
                        button.onclick = function playCard() {
                            li.remove()
                            socket.send(JSON.stringify({
                                type: "ClientMessage$CardPlayed",
                                cardId: card.id,
                            }))
                        }
                        li.appendChild(button)
                        handEl.appendChild(li)
                    })
                    return;
                }
                case "BetPlaced": {
                    const playersWhoHaveBet = document.getElementById("playersWhoHaveBet")
                    const li = document.createElement("li")
                    li.innerText = gameEvent.playerId
                    playersWhoHaveBet.appendChild(li)

                    if (gameEvent.isBettingComplete) {
                        const gamePhaseEl = document.getElementById("gamePhase")
                        gamePhaseEl.innerText = "It's trick taking time!"
                    }
                    return
                }
                case "BettingCompleted": {
                    const bets = gameEvent.bets
                    const betsEl = document.getElementById("bets")
                    betsEl.innerHTML = ""
                    Object.entries(bets).forEach(([playerId, bet]) => {
                        const li = document.createElement("li")
                        li.innerText = `${playerId}:${bet}`
                        betsEl.appendChild(li)
                    })
                    return
                }
                case "CardPlayed": {
                    const trick = document.getElementById("trick")
                    const li = document.createElement("li")
                    li.innerText = `${gameEvent.playerId}:${gameEvent.cardId}`
                    trick.appendChild(li)
                    return
                }
                default: {
                    socket.send(JSON.stringify({
                        type: "ClientMessage$UnhandledGameEvent",
                        offender: gameEvent.type,
                    }))
                    console.error(`Unknown game event ${gameEvent.type}`)
                }
            }
        } catch (e) {
            socket.send(JSON.stringify({
                stackTrace: e.stack,
                type: "ClientMessage$Error",
            }))
            throw e
        }
    });
</script>
</body>
</html>
