<html>
<head>
    <link href="/style.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="content">
    <h1>Game Page</h1>

    <h2 id="gameState">
        {{#if waitingForMorePlayers}}
            Waiting for more players...
        {{/if}}
    </h2>

    <ul id="players">
        {{#each players}}
            <li>{{this}}</li>
        {{/each}}
    </ul>

    <ul id="hand"></ul>

    <form>
        <label>
            Bet
            <input type="number" name="bet" min="0" max="10" value="0">
        </label>
        <button id="placeBet" type="button" onclick="onBetSubmit()">Place Bet</button>
    </form>

    <ul id="bets"></ul>
</div>
<script>
    function onBetSubmit() {
        const bet = document.getElementsByName("bet")[0].value
        socket.send(JSON.stringify({
            type: "ClientMessage$BetPlaced",
            bet: bet,
            playerId: "{{playerId}}"
        }))
    }

    const socket = new WebSocket("{{wsHost}}/{{playerId}}");

    // Connection opened
    socket.addEventListener("open", (event) => {
        console.log("connected to ws")
    });

    socket.addEventListener("close", (event) => {
        console.error("disconnected from ws")
    })

    // Listen for messages
    socket.addEventListener("message", (event) => {
        console.log("Message from server ", event.data);
        try {
            JSON.parse(event.data)
        } catch (e) {
            console.warn(e)
            // it's the weird blob type that I don't know how to deal with
            return
        }

        const gameEvent = JSON.parse(event.data)
        switch (gameEvent.type) {
            case "PlayerJoined": {
                const players = document.getElementById("players")
                const li = document.createElement("li")
                li.innerText = gameEvent.playerId
                players.appendChild(li)

                if (!gameEvent.waitingForMorePlayers) {
                    const gameStateEl = document.getElementById("gameState")
                    gameStateEl.innerText = ""
                }
                break;
            }
            case "GameStarted": {
                const gameStateEl = document.getElementById("gameState")
                gameStateEl.innerText = "The game has started :D"
                break;
            }
            case "RoundStarted": {
                const handEl = document.getElementById("hand")
                gameEvent.cardsDealt.forEach(card => {
                    const li = document.createElement("li")
                    li.innerText = card
                    handEl.appendChild(li)
                })
                break;
            }
            default: {
                socket.send(`Unknown game event ${gameEvent.type}`)
                throw Error(`Unknown game event ${gameEvent.type}`)
            }
        }
    });
</script>
</body>
</html>
